name: Weekly Data Updates

on:
  schedule:
    # Mondays at 7 AM Brazil time (UTC-3) = 10 AM UTC
    - cron: '0 10 * * 1'
  workflow_dispatch:
    inputs:
      target_group:
        description: 'Target group to update'
        required: false
        default: 'weekly'
        type: choice
        options:
          - weekly
          - monthly
          - all

jobs:
  update-weekly-data:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::targets
            any::tarchetypes
            any::cli
            any::here
            any::readr
            any::dplyr
            any::purrr

      - name: Install package
        run: |
          Rscript -e 'remotes::install_local(".", dependencies = TRUE)'

      - name: Create required directories
        run: |
          mkdir -p inst/cached_data
          mkdir -p inst/reports
          mkdir -p _targets

      - name: Check current cache status
        run: |
          Rscript -e 'source("data-raw/pipeline/generate_report.R"); generate_quick_status()'

      - name: Determine targets to run
        id: determine-targets
        run: |
          target_group="${{ github.event.inputs.target_group || 'weekly' }}"

          if [ "$target_group" == "weekly" ]; then
            # Weekly: fetch, cache, validate for high-priority datasets
            targets="bcb_series_data,bcb_series_cache,bcb_series_validation,bcb_realestate_data,bcb_realestate_cache,bcb_realestate_validation,fgv_ibre_data,fgv_ibre_cache,fgv_ibre_validation,abecip_data,abecip_cache,abecip_validation,abrainc_data,abrainc_cache,abrainc_validation,secovi_data,secovi_cache,secovi_validation,rppi_sale_data,rppi_sale_cache,rppi_sale_validation,rppi_rent_data,rppi_rent_cache,rppi_rent_validation,pipeline_summary"
          elif [ "$target_group" == "monthly" ]; then
            # Monthly: fetch, cache, validate for lower-priority datasets
            targets="bis_rppi_data,bis_rppi_cache,bis_rppi_validation,cbic_data,cbic_cache,cbic_validation,property_records_data,property_records_cache,property_records_validation,pipeline_summary"
          elif [ "$target_group" == "all" ]; then
            # All targets (weekly + monthly)
            targets="bcb_series_data,bcb_series_cache,bcb_series_validation,bcb_realestate_data,bcb_realestate_cache,bcb_realestate_validation,fgv_ibre_data,fgv_ibre_cache,fgv_ibre_validation,abecip_data,abecip_cache,abecip_validation,abrainc_data,abrainc_cache,abrainc_validation,secovi_data,secovi_cache,secovi_validation,rppi_sale_data,rppi_sale_cache,rppi_sale_validation,rppi_rent_data,rppi_rent_cache,rppi_rent_validation,bis_rppi_data,bis_rppi_cache,bis_rppi_validation,cbic_data,cbic_cache,cbic_validation,property_records_data,property_records_cache,property_records_validation,pipeline_summary"
          fi

          echo "targets=$targets" >> $GITHUB_OUTPUT
          echo "group=$target_group" >> $GITHUB_OUTPUT

      - name: Run selected targets pipeline
        run: |
          Rscript -e '
            library(targets)

            target_list <- unlist(strsplit("${{ steps.determine-targets.outputs.targets }}", ","))
            target_group <- "${{ steps.determine-targets.outputs.group }}"

            cli::cli_h1("Running {target_group} data pipeline")
            cli::cli_inform("Targets: {paste(target_list, collapse=\", \")}")

            # Run targets with extended timeout for slower sources
            options(timeout = 600)  # 10 minutes per target

            tar_make(names = all_of(target_list))

            cli::cli_alert_success("{target_group} pipeline completed")
          '

      - name: Validate updated data
        run: |
          Rscript -e '
            source("data-raw/pipeline/validation.R")
            source("data-raw/pipeline/targets_helpers.R")

            # Validate cache integrity
            cache_valid <- validate_cache_integrity()

            if (!cache_valid) {
              cli::cli_alert_danger("Cache validation failed!")
              quit(status = 1)
            }

            # Get cache summary for validation
            cache_summary <- get_cache_summary()
            cli::cli_inform("Cache summary:")
            print(cache_summary)

            cli::cli_alert_success("Cache validation passed")
          '

      - name: Generate comprehensive report
        run: |
          Rscript -e 'source("data-raw/pipeline/generate_report.R"); generate_pipeline_report()'

      - name: Check if there are changes to commit
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          # Add all changes
          git add inst/cached_data/
          git add inst/reports/
          git add _targets/

          # Create detailed commit message using heredoc
          target_group="${{ steps.determine-targets.outputs.group }}"

          if [ "$target_group" == "weekly" ]; then
            git commit -m "$(cat <<'EOF'
          Weekly data update (weekly): $(date +'%Y-%m-%d %H:%M UTC')

          Updated datasets:
          - BCB Series (macroeconomic indicators)
          - BCB Real Estate (market data)
          - FGV IBRE (economic indicators)
          - ABECIP (housing credit)
          - ABRAINC (primary market)
          - SECOVI-SP (São Paulo market)
          - RPPI (sale and rent price indices)

          Report: inst/reports/pipeline_status.md
          EOF
          )"
          elif [ "$target_group" == "monthly" ]; then
            git commit -m "$(cat <<'EOF'
          Weekly data update (monthly): $(date +'%Y-%m-%d %H:%M UTC')

          Updated datasets:
          - BIS RPPI (international property prices)
          - CBIC (construction materials)
          - Property Records (ITBI transactions)

          Report: inst/reports/pipeline_status.md
          EOF
          )"
          elif [ "$target_group" == "all" ]; then
            git commit -m "$(cat <<'EOF'
          Weekly data update (all): $(date +'%Y-%m-%d %H:%M UTC')

          Comprehensive update of all weekly and monthly datasets.
          - 8 weekly datasets (BCB, FGV, ABECIP, ABRAINC, SECOVI, RPPI)
          - 3 monthly datasets (BIS, CBIC, Property Records)

          Report: inst/reports/pipeline_status.md
          EOF
          )"
          fi

          git push

      - name: Report completion status
        if: always()
        run: |
          target_group="${{ steps.determine-targets.outputs.group }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ $target_group update completed successfully"
          else
            echo "❌ $target_group update failed"
            exit 1
          fi